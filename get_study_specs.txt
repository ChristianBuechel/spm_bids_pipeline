function [path,vars,analysis,import] = get_study_specs

%% path definitions
path.baseDir     = 'd:\lcpa\';
path.templateDir = 'd:\lcpa\spm_bids_pipeline\templates\';
vars.max_procs   = 12;

import.prisma        = [25298,25299,25300,25301,25302,25314,25315]; % translates to PRISMA_nnn
import.prisma_no     = [8    ,9    ,10   ,11   ,12   ,13   ,14]; % subject number

import.user          = 'buechel';
import.server        = 'revelations.nin.uke.uni-hamburg.de';

import.data(1).dir        = 'func'; 
import.data(1).type       = 'bold';
import.data(1).seq        = 'ep2d_bold, 2.0mm3, mb2, fMRI '; %protocol name (trailing space makes it unique) 
import.data(1).cond       = 'n > 1000'; % heuristic to get only valid runs (e.g. more than 1000 volumes)

import.data(2).dir        = 'anat'; % valid BIDS dir name
import.data(2).type       = 'T1w'; % valid BIDS file name
import.data(2).seq        = 'ninFLASH_v14A_df, mprage, defa-SAT_DEFA ';
import.data(2).cond       = 'n == 240'; % heuristic to get only valid runs (e.g. exactly 240 slices)
 
% import.data(3).dir        = 'blip';
% import.data(3).type       = 'blip_std';
% import.data(3).seq        = 'ep2d_diff, 2.0mm3, mb2, PE std';
% import.data(3).cond       = 'n == 60';
% 
% import.data(4).dir        = 'blip';
% import.data(4).type       = 'blip_inv';
% import.data(4).seq        = 'ep2d_diff, 2.0mm3, mb2, PE inv';
% import.data(4).cond       = 'n == 60';
% 
% import.data(5).dir        = 'fmap';
% import.data(5).type       = 'phasediff';
% import.data(5).seq        = 'gre_field_map, 3mm, filter M ';
% import.data(5).cond       = 'n == 60';
% 
% import.data(6).dir        = 'fmap';
% import.data(6).type       = 'magnitude';
% import.data(6).seq        = 'gre_field_map, 3mm, filter M ';
% import.data(6).cond       = 'n == 120';

import.dummies            = 4; % these scans are removed when merging 3D epifiles to a 4D file

path.derivDir        = fullfile(path.baseDir, 'derivatives');
path.preprocDir      = fullfile(path.baseDir, 'derivatives', 'spm_preprocessing');
path.firstlevelDir   = fullfile(path.baseDir, 'derivatives', 'spm_firstlevel');
path.secondlevelDir  = fullfile(path.baseDir, 'derivatives', 'spm_secondlevel');

%% vars definitions

% various predefined names (change only if you know what you are doing)
vars.skullStripID    = 'skull-strip-T1.nii';
vars.T1maskID        = 'brain_mask.nii';
vars.templateID      = 'cb_Template_%d_Dartel.nii';
vars.templateT1ID    = 'cb_Template_T1.nii';
%vars.groupMaskID     = 'brainmask.nii';
vars.groupMaskID     = 'neuromorphometrics.nii';

%% this need to be adapted to your study / computer--------------
vars.task        = 'lcpa';
vars.nRuns       = 2;
vars.nSess       = 1;
% get info for slice timing correction
vars.sliceTiming.so    = [1720, 1660, 1602, 1543, 1483, 1423, 1365, 1305, 1245, 1188, 1128, 1067, 1007, 950, 890, 830, 770, 712, 653, 593, 535, 475, 415, 355, 298, 238, 177, 117, 60, 0,...
                          1720, 1660, 1602, 1543, 1483, 1423, 1365, 1305, 1245, 1188, 1128, 1067, 1007, 950, 890, 830, 770, 712, 653, 593, 535, 475, 415, 355, 298, 238, 177, 117, 60, 0]; % in ms
vars.sliceTiming.tr       = 1.8; % in s
vars.sliceTiming.nslices  = 60;
vars.sliceTiming.refslice = 900;


% the next section can be used to define different groups for 2nd level analysis
analysis.all_subs  = [8:14]; % very all;
single_group       = ones(size(analysis.all_subs));
analysis.group_ind  = single_group; %index 1
analysis.group_weights = [1];
analysis.group_names   = {'All'};

analysis.max_procs         = 12; % how many processes can be used for 1st level analyses
analysis.parallel          = 1;
analysis.noise_corr        = ['mov24_wm_csf_roi']; % can contain any combination of "mov6" "mov24" "wm" "csf" "roi" "physio"
%analysis.noise_corr        = ['mov24_wm'];
%analysis.noise_corr        = ['physio'];
analysis.cvi               = 'none'; % any of "AR(1)"  "FAST" "none" "wls" the latter uses J. Diedrichsen toolbox to do WLS https://www.diedrichsenlab.org/imaging/robustWLS.html
analysis.shift             = 0; % shift all onsets by n TRs
analysis.skernel           = 6; % smoothing kernel
analysis.hpf               = 180;
analysis.bs                = 0; % do brainstem specific analysis
analysis.use_vasa          = 0; % do vasa correction https://www.sciencedirect.com/science/article/pii/S1053811915008484

% what to do 1st level
analysis.do_model          = 1; % specify the model
analysis.do_est            = 1; % estimate the model
analysis.do_vasa           = 1; % estimate Vasa image for correction
analysis.do_cons           = 1; % do contrasts
analysis.do_correct_vasa   = 1; % correct con images using Vasa image 
analysis.do_warp           = 1; % warp native space con or beta images to template space
analysis.do_smooth         = 1; % smooth these warped beta and con images

% what to do second level
analysis.do_fact           = 0; % simple anova that reproduces the 1st level at the 2nd level
analysis.do_fact_con       = 0; % do all contrasts at the second level

analysis.do_one_t          = 0; % instead use the estimated cons from 1st level and do one sample t tests


%% some code to organise the analyses
do_hrf = 1;
do_fir = 0;
do_lsa = 0;

if do_hrf    
    [analysis.t_con, analysis.t_con_names] = get_hrf_cons_param;
    analysis.concatenate       = 1; % concatenate or not ?
    analysis.ana               = 2; % hrf
    analysis.n_base            = 1;
    analysis.name_ana          = 'lcpa_hrf';
    analysis.events            = '_param'; % this refers to the tsv file: e.g. sub-08_ses-01_task-lcpa_run-01_events_param.tsv
    analysis.cond_names        = {'vis'        ,'mix'  ,'pain'}; % three conditions
    analysis.p_mod             = {{'p_vistype'},{}     ,{'p_painint'}}; % vis and pain have 1 or 2 parametric modulators
end

if do_fir
    analysis.concatenate       = 1;
    analysis.t_con             = [];
    analysis.t_con_names       = [];
    analysis.ana               = 1; % fir
    analysis.n_base            = 10;
    analysis.name_ana          = 'lcpa_fir';
    analysis.events            = '_param'; % this refers to the tsv file: e.g. sub-08_ses-01_task-lcpa_run-01_bold_param.tsv
    analysis.cond_names        = {'pain'}; % only pain
    analysis.p_mod             = {{'p_painint'}};
end


if do_lsa
    analysis.concatenate       = 0;  
    analysis.t_con             = [];
    analysis.t_con_names       = [];
    analysis.lss               = 0;
    analysis.ana               = 3; % lsa
    analysis.n_base            = 1;
    analysis.name_ana          = 'lcpa_lsa';
    analysis.events            = '_lsa'; % this refers to the tsv file: e.g. sub-08_ses-01_task-lcpa_run-01_bold_param.tsv
    analysis.cond_names        = {'face'        ,'house'  ,'mix','pain'};
    analysis.p_mod             = {{}            ,{}       ,{}   ,{}};
end


    function [t_con, t_con_names] = get_hrf_cons_param
        
        t_con = [1  0   0   0 0;...
                 0  0   1   0 0;...
                 0  0   0   1 0;...
                 0  1   0   0 0;...
                 0 -1   0   0 0;...
                 0  0   0   0 1];
        t_con_names         = {'vis','mix','pain','h_f','f_h','p_param'};
    end

end