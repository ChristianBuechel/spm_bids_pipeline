function [path,vars,analysis,import,qc] = get_study_specs

    %% path definitions
    path.baseDir     = '/home/keuter/projects/painact/data/bids';
    path.templateDir = '/home/keuter/scripts/spm_bids_pipeline/templates/';
    path.derivDir        = fullfile(path.baseDir, 'derivatives');
    path.preprocDir      = fullfile(path.baseDir, 'derivatives', 'spm_preprocessing');
    path.firstlevelDir   = fullfile(path.baseDir, 'derivatives', 'spm_firstlevel');
    path.secondlevelDir  = fullfile(path.baseDir, 'derivatives', 'spm_secondlevel');
    path.physioDir       = fullfile(path.baseDir, 'physio');
    
    vars.max_procs   = 8; % how many parallel processes
    vars.parallel    = 1;  % parallel processing?
    
    %% Import related stuff
    import.prisma        = '/home/keuter/projects/painact/data/bids/participants.tsv';
    import.user          = 'keuter';
    import.server        = 'revelations.nin.uke.uni-hamburg.de';
    
    hh = 1;
    import.data(hh).enddir        = 'func';
    import.data(hh).type       = 'bold';
    import.data(hh).seq        = 'ninEPI_bold_v12C, fmri '; %protocol name (trailing space makes it unique)
    import.data(hh).cond       = 'n > 180'; % heuristic to get only valid runs (e.g. more than 1000 volumes)
    hh = hh + 1;
    
    import.data(hh).dir        = 'anat'; % valid BIDS dir name
    import.data(hh).type       = 'T1w'; % valid BIDS file name
    import.data(hh).seq        = 'ninFLASH_v14A_df, mprage, defa-SAT_DEFA ';
    import.data(hh).cond       = 'n == 240'; % heuristic to get only valid runs (e.g. exactly 240 slices)
    hh = hh + 1;
    
    import.data(hh).dir        = 'fmap';
    import.data(hh).type       = 'magnitude';
    import.data(hh).seq        = 'gre_field_map, 3mm, filter M ';
    import.data(hh).cond       = 'n == 132';
    hh = hh + 1;
    
    import.data(hh).dir        = 'fmap';
    import.data(hh).type       = 'phasediff';
    import.data(hh).seq        = 'gre_field_map, 3mm, filter M ';
    import.data(hh).cond       = 'n == 66';
    hh = hh + 1;
    
    % Specific runs can be excluded even if they match the criteria above see
    % sbp_import_data.m for details on how to mark this in participants.tsv
    
    import.dummies            = 0; % these scans are removed when merging 3D epifiles to a 4D file
    
    %% vars definitions
    
    % various predefined names (change only if you know what you are doing)
    vars.skullStripID    = 'skull-strip-T1.nii';
    vars.T1maskID        = 'brain_mask.nii';
    vars.templateID      = 'cb_Template_%d_Dartel.nii';
    vars.templateT1ID    = 'cb_Template_T1.nii';
    vars.groupMaskID     = 'neuromorphometrics.nii';
    vars.brainstemID     = 'Cerebellum_SUIT_05.nii'; % or 'brainstem_mask.nii'
    vars.templateStripID = 'cb_Template_SkullStrip.nii';
    
    %% General settings
    
    vars.task        = 'painact';
    vars.nRuns       = 6; %
    vars.nSess       = 1;
    
    % get info for slice timing correction MUST BE in ms
    vars.sliceTiming.so       = [1915, 1855, 1795, 1735, 1675, 1615, 1555, 1495, 1437.5, 1377.5, 1317.5, 1257.5, 1197.5, 1137.5, 1077.5, 1017.5, 957.5, 897.5, 837.5, 777.5, 717.5, 657.5, 597.5, 540, 480, 420, 360, 300, 240, 180, 120, 60, 0, ...
                                 1915, 1855, 1795, 1735, 1675, 1615, 1555, 1495, 1437.5, 1377.5, 1317.5, 1257.5, 1197.5, 1137.5, 1077.5, 1017.5, 957.5, 897.5, 837.5, 777.5, 717.5, 657.5, 597.5, 540, 480, 420, 360, 300, 240, 180, 120, 60, 0];
    vars.sliceTiming.tr       = 1.9750; % in s
    vars.sliceTiming.nslices  = 66;
    vars.sliceTiming.refslice = vars.sliceTiming.tr / 2 * 1000;
    
    %% QC settings
    %file name for mov regressors
    qc.movFilename  = 'noise_mov_rasub-%02d_ses-%02d_task-%s_run-%02d_bold.mat';
    
    %thresholds for movement inspection
    qc.threshSpike     = 0.7; %threshold for spikes
    qc.threshMov       = 3; %threshold for overall movement within 1 run or between runs
    qc.percSpike       = 0.05; %threshold in % in number of volumes that are discarded because of spikes
    
    % display options
    
    qc.maxDisImg       = 7; %number of subject images displayed at once (not all numbers make sense here, 7 means a 4x2 display including template, otherwise try 5(3x2))
    qc.contour         = 1; %1: template contour is displayed on images; 0: is not displayed
    
    % first level related qc
    
    qc.tThresh         = 1.7; %t-value threshold, only values above this threshold will be shown
    qc.tMapSmoothK     = 2; %smoothing kernel for t-map
    qc.overlayColor    = [1 0 0]; %color for overlay (here red)
    
    
    %% Analysis settings
    % the next section can be used to define different groups for 2nd level analysis
    analysis.all_subs = 1:58;
    excluded_subs = [16, 43, 45, 48, 53, 56];
    analysis.all_subs(ismember(analysis.all_subs, excluded_subs)) = [];
 
    % group settings
    single_group       = ones(size(analysis.all_subs));
    analysis.group_ind  = single_group; %index 1
    analysis.group_weights = [1];
    analysis.group_ana_names   = {'All'};
    
    % exlusions
    analysis.exclude(1) = struct('sub',48, 'ses',1, 'run', [6]);
    
    analysis.noise_corr        = ['mov24_wm_csf_roi_physio']; % can contain any combination of "mov6" "mov24" "wm" "csf" "roi" "physio"
    analysis.cvi               = 'none'; % any of "AR(1)"  "FAST" "none" "wls" the latter uses J. Diedrichsen toolbox to do WLS https://www.diedrichsenlab.org/imaging/robustWLS.html
    analysis.shift             = 0; % shift all onsets by n TRs 
    analysis.skernel           = 4; % smoothing kernel
    analysis.hpf               = 120;
    analysis.bs                = 0; % do brainstem specific analysis (not fully implemented yet)
    analysis.use_vasa          = 0; % do vasa correction https://www.sciencedirect.com/science/article/pii/S1053811915008484
    
    analysis.sess              = [1]; % which sessions to analyze (can be a vector)
    analysis.prune             = 1;   % use only scnas that are relevant (e.g. skip scans at the end when there are no more stimuli)
    
    % what to do 1st level
    analysis.do_model          = 1; % specify the model
    analysis.do_est            = 1; % estimate the model
    analysis.do_vasa           = 0; % estimate vasa image for correction
    analysis.do_cons           = 1; % do contrasts
    analysis.do_correct_vasa   = 0; % correct beta/con images using vasa image
    analysis.do_warp           = 1; % warp native space con or beta images to template space
    analysis.do_smooth         = 1; % smooth these warped beta and con images
    
    % what to do at the second level
    analysis.fact_dept         = 0; % account for diff covariances at the 2nd level ANOVA
    analysis.fact_var          = 0; % ... or only variances
    analysis.do_fact           = 0; % simple anova that reproduces the 1st level anlysis at the 2nd level
    analysis.do_fact_con       = 0; % do all contrasts at the second level
    
    analysis.do_one_t          = 0; % instead use the estimated cons from 1st level and do one sample t tests
    

    %whatto do

    do_hrf       = 0;
    do_hrf_param = 0;
    do_fir_cue   = 0;
    do_fir_stim  = 0;
    do_ppi       = 1;

    if do_hrf    
        
        analysis.concatenate       = 1; % concatenate or not ?
        analysis.ana               = 2; % hrf
        analysis.n_base            = 1;
        analysis.name_ana          = 'painact_hrf';
        analysis.events            = ''; % this refers to the tsv file: e.g. sub-08_ses-01_task-lcpa_run-01_events_param.tsv
        analysis.cond_names        = {'CUE_Pain-Move_L', 'CUE_Pain-noMove_L', 'CUE_noPain-Move_L', 'CUE_noPain-noMove_L', ...
                                      'STM_Pain-Move_L', 'STM_Pain-noMove_L', 'STM_noPain-Move_L', 'STM_noPain-noMove_L', ...    
                                      'CUE_Pain-Move_R', 'CUE_Pain-noMove_R', 'CUE_noPain-Move_R', 'CUE_noPain-noMove_R', ...
                                      'STM_Pain-Move_R', 'STM_Pain-noMove_R', 'STM_noPain-Move_R', 'STM_noPain-noMove_R', ...  
                                      'CUE_Rating', 'STM_Rating', 'Rating', 'CUE_invalid', 'STM_invalid'};
    
        %'CUE_invalid', 'STM_invalid'
        analysis.p_mod             = cell(1, numel(analysis.cond_names)); % vis and pain have 1 or 2 parametric modulators
        
    
        [analysis.t_con, analysis.t_con_names] = get_T_contrasts_hrf(analysis.cond_names);
        [analysis.f_con, analysis.f_con_names] = get_F_contrasts_hrf(analysis.cond_names);
    
    
    end
    
    if do_hrf_param
        analysis.concatenate       = 1; % concatenate or not ?
        analysis.ana               = 2; % hrf
        analysis.n_base            = 1;
        analysis.name_ana          = 'painact_hrf_param';
        analysis.events            = '_param'; % this refers to the tsv file: e.g. sub-08_ses-01_task-lcpa_run-01_events_param.tsv
        % cave: hyphens in event names dont work with pipeline, so I
        % updated the event files (not done for normal hrf analysis)
        analysis.cond_names        = {'CUE_Pain_Move_L', 'CUE_Pain_noMove_L', 'CUE_noPain_Move_L', 'CUE_noPain_noMove_L', ...
                                      'STM_Pain_Move_L', 'STM_Pain_noMove_L', 'STM_noPain_Move_L', 'STM_noPain_noMove_L', ...    
                                      'CUE_Pain_Move_R', 'CUE_Pain_noMove_R', 'CUE_noPain_Move_R', 'CUE_noPain_noMove_R', ...
                                      'STM_Pain_Move_R', 'STM_Pain_noMove_R', 'STM_noPain_Move_R', 'STM_noPain_noMove_R', ...  
                                      'CUE_Rating', 'STM_Rating', 'Rating', 'CUE_invalid', 'STM_invalid'};
    
        analysis.p_mod               = {{}, {}, {}, {}, ...
                                        {'STM_Pain_Move_L_param'}, {}, {'STM_noPain_Move_L_param'}, {}, ...    
                                        {}, {}, {}, {}, ...
                                        {}, {}, {}, {}, ...  
                                        {}, {}, {}, {},{}};
    
        [analysis.t_con, analysis.t_con_names] = get_T_contrasts_hrf_param;
        [analysis.f_con, analysis.f_con_names] = get_F_contrasts_hrf_param;

    end

    if do_fir_cue
        analysis.max_procs         = 12; % large DesMtx
        analysis.concatenate       = 1;
        analysis.t_con             = [];
        analysis.t_con_names       = [];
        analysis.ana               = 1; % fir
        analysis.n_base            = 8;
        analysis.bin_size          = 2; % in seconds
        analysis.name_ana          = 'painact_fir_cue';
        analysis.events            = ''; % this refers to the tsv file: e.g. sub-08_ses-01_task-lcpa_run-01_bold_param.tsv
        analysis.cond_names        = {'CUE_Pain-Move_L', 'CUE_Pain-noMove_L', 'CUE_noPain-Move_L', 'CUE_noPain-noMove_L', ...
                                      'CUE_Pain-Move_R', 'CUE_Pain-noMove_R', 'CUE_noPain-Move_R', 'CUE_noPain-noMove_R'}; % only cue
        analysis.p_mod             = cell(1, numel(analysis.cond_names));
        [analysis.f_con, analysis.f_con_names] = get_F_contrasts_fir(analysis.cond_names);
    end
    
    if do_fir_stim
        analysis.max_procs         = 12; % large DesMtx
        analysis.concatenate       = 1;
        analysis.t_con             = [];
        analysis.t_con_names       = [];
        analysis.ana               = 1; % fir
        analysis.n_base            = 8;
        analysis.bin_size          = 2; % in seconds
        analysis.name_ana          = 'painact_fir_stim';
        analysis.events            = ''; % this refers to the tsv file: e.g. sub-08_ses-01_task-lcpa_run-01_bold_param.tsv
        analysis.cond_names        = {'STM_Pain-Move_L', 'STM_Pain-noMove_L', 'STM_noPain-Move_L', 'STM_noPain-noMove_L', ...
                                      'STM_Pain-Move_R', 'STM_Pain-noMove_R', 'STM_noPain-Move_R', 'STM_noPain-noMove_R'}; % only stim
        analysis.p_mod             = cell(1, numel(analysis.cond_names));
        [analysis.f_con, analysis.f_con_names] = get_F_contrasts_fir(analysis.cond_names);
    end


    if do_ppi

        analysis.do_ppi           = 1;
        analysis.ppi              = struct( ...
                                        'def',    'sphere',    ...         % [sphere, box, mask, cluster, all]
                                        'spec',    10,         ...         % VOI definition parameters (e.g. radius in mm for sphere or filename for mask)
                                        'xyz',     [-1.5 3 42]', ...       % centre of VOI {mm} if sphere or box
                                        'str',    'MCC_10mm', ...          % description, will be used as analysis dirname
                                        'name',   'MCC', ...               % will be used for regressor name
                                        'skernel', 6,          ...         % smoothing kernel for ppij smoothing  
                                        'conds',   [5 6 7 8]);             % indices to analysis.cond_names (TODO: also allow string input)

      % analysis.ppi              = struct( ...
      %                                 'def',    'mask',    ...           % [sphere, box, mask, cluster, all]
      %                                 'spec',    '/home/keuter/projects/painact/masks/diedrichsen_mask.nii', ...         % VOI definition parameters (e.g. radius in mm for sphere or filename for mask)
      %                                 'str',    'cerebellum', ...        % description, will be used as analysis dirname
      %                                 'name',   'cerebellum', ...        % will be used for regressor name
      %                                 'skernel', 6,          ...         % smoothing kernel for ppij smoothing  
      %                                 'conds',   [5 6 7 8]);             % indices to analysis.cond_names (TODO: also allow string input)
                                        
      %                                 'ind',                             % if def == mask take only parts of the image with this value (e.g. indexed atlas),
                                                                           % CAUTION: should not be defined when mask is not an atlas
        analysis.concatenate       = 1; % concatenate or not ?
        analysis.ana               = 2; % hrf
        analysis.n_base            = 1;
        analysis.name_ana          = 'painact_ppi2';
        analysis.events            = ''; % this refers to the tsv file: e.g. sub-08_ses-01_task-lcpa_run-01_events_param.tsv
        
        analysis.cond_names        = {'CUE_Pain-Move_L', 'CUE_Pain-noMove_L', 'CUE_noPain-Move_L', 'CUE_noPain-noMove_L', ...
                                      'STM_Pain-Move_L', 'STM_Pain-noMove_L', 'STM_noPain-Move_L', 'STM_noPain-noMove_L', ... 
                                      'CUE_Pain-Move_R', 'CUE_Pain-noMove_R', 'CUE_noPain-Move_R', 'CUE_noPain-noMove_R', ...
                                      'STM_Pain-Move_R', 'STM_Pain-noMove_R', 'STM_noPain-Move_R', 'STM_noPain-noMove_R', ...  
                                      'CUE_Rating', 'STM_Rating', 'Rating', 'CUE_invalid', 'STM_invalid'};
    
        analysis.p_mod             = cell(1, numel(analysis.cond_names)); % vis and pain have 1 or 2 parametric modulators
        
    
        analysis.t_con             = [0 0 0 0 0 1 1 0 0;
                                      0 0 0 0 0 1 0 1 0;
                                      0 0 0 0 0 1 1 -1 -1;
                                      0 0 0 0 0 1 -1 1 -1;
                                      0 0 0 0 0 1 -1 -1 1;];

        analysis.t_con_names       = {'ppi_main_pain', 'ppi_main_motor', 'ppi_pain>nopain', ...
                                      'ppi_move>nomove', 'ppi_pain_x_move_neg'};
    end


end